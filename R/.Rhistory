range(x)
pretty(range(x), n = 6)
pretty(range(x), n = 30)
breaks = pretty(range(x), n = 30)
diff(breaks)
nB <- length(breaks)
h <- as.double(diff(breaks))
diddle <- 1e-07 * if (nB > 5)
stats::median(h)
else if (nB <= 3)
diff(range(x))
else min(h[h > 0])
diddle <- 1e-07 * stats::median(h)
diddle
diddle = -diddle
fuzzybreaks <- breaks + fuzz
fuzz = diddle
fuzz
fuzzybreaks <- breaks + fuzz
fuzzybreaks
rep.int(diddle, nB - 1L)
fuzz = rep.int(diddle, nB - 1L)
fuzzybreaks <- breaks + fuzz
fuzzybreaks
fuzz = rep.int(diddle, nB)
fuzzybreaks <- breaks + fuzz
fuzzybreaks
source("~/Downloads/myhist.R")
fuzzybreaks
source("~/Downloads/myhist.R")
myhist(mtcars$mpg)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg)
myhist(mtcars$mpg, breaks = 30)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = FALSE, include.lowest = FALSE)
source("~/Downloads/myhist.R")
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30, right = FALSE, include.lowest = FALSE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
source("~/Downloads/myhist.R")
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
source("~/Downloads/myhist.R")
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
x
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = TRUE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
sort(x)
myhist(mtcars$mpg, right = FALSE)
myhist(mtcars$mpg, right = TRUE)
ggplot(mtcars, aes(mpg)) + geom_histogram()
myhist(mtcars$mpg, bins = 30, right = FALSE)
myhist(mtcars$mpg, breaks = 30, right = FALSE)
ggplot(mtcars, aes(mpg)) + geom_histogram()
myhist(mtcars$mpg, breaks = 30, right = FALSE)
brk = c(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)
myhist(mtcars$mpg, breaks = brk, right = FALSE)
myhist(mtcars$mpg, breaks = brk, right = FALSE, include.lowest = FALSE)
ggplot(mtcars, aes(mpg)) + geom_histogram()
p<-ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_dotplot(binaxis='y', stackdir='center')
p
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
head(ToothGrowth)
p<-ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_dotplot(binaxis='y', stackdir='center')
p
p<-ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_dotplot(binaxis='y', stackdir='center')
p
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
head(ToothGrowth)
ToothGrowth$len[,ToothGrowth$dose==0.5]
ToothGrowth$len[ToothGrowth$dose==0.5,]
ToothGrowth[1:20,]
ToothGrowth[1:10,]
ToothGrowth[20:30,]
ToothGrowth[1:20,]
View(ToothGrowth)
ToothGrowth[31:40,]
ToothGrowth[31:40,]$len
c(ToothGrowth[1:10,]$len, ToothGrowth[31:40,]$len)
h05 = c(ToothGrowth[1:10,]$len, ToothGrowth[31:40,]$len)
hist(h05)
hist(h05, breaks = 30)
hist(h05)
hist05 = hist(h05)
hist05 = hist(h05, breaks = 30)
hist05$counts
hist05$breaks
hist(h05)
source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RTCGA")
browseVignettes("RTCGA")
library(RTCGA)
checkTCGA('Dates')
(cohorts <- infoTCGA() %>%
rownames() %>%
sub("-counts", "", x=.))
library(tidyr)
(cohorts <- infoTCGA() %>%
rownames() %>%
sub("-counts", "", x=.))
infoTCGA()
library(RTCGA.mRNA)
expressionsTCGA(BRCA.mRNA)
expressionsTCGA(BRCA)
?expressionsTCGA
library(RTCGA.rnaseq)
biocLite("RTCGA.clinical")
BiocManager::install("RTCGA.mRNA")
BiocManager::install("RTCGA.rnaseq")
BiocManager::install("RTCGA.clinical")
BiocManager::install("RTCGA.mutations")
RTCGA.RPPA
BiocManager::install("RTCGA.RPPA")
BiocManager::install("RTCGA.CNV")
BiocManager::install("RTCGA.RPPA.20160128")
library(RTCGA.mRNA)
expressionsTCGA(BRCA.mRNA)
write.table(expressionsTCGA(BRCA.mRNA), file="~/Downloads/brca.txt", sep = "\t")
BiocManager::install("RTCGA.methylation")
BiocManager::install("RTCGA.miRNASeq")
BiocManager::install("RTCGA.PANCAN12")
BiocManager::install("RTCGA.methylation")
library(RTCGA.PANCAN12)
?RTCGA.PANCAN12
expression.cb1
datasetsTCGA()
datasetsTCGA
head(RTCGA.PANCAN12::expression.cb)
RTCGA.PANCAN12::expression.cb
RTCGA.PANCAN12::expression.cb1
browseVignettes("RTCGA.PANCAN12")
library(RTCGA)
library(RTCGA.PANCAN12)
expression.cb1
expression.cb1()
library(RTCGA.mutations)
?RTCGA.mutations
library(RTCGA.CNV)
library(RTCGA)
library(RTCGA.clinical)
library(RTCGA.CNV)
library(RTCGA.methylation)
library(RTCGA.miRNASeq)
library(RTCGA.mRNA)
library(RTCGA.mutations)
library(RTCGA.PANCAN12)
library(RTCGA.rnaseq)
library(RTCGA.RPPA)
expression.cb1
ACC.clinical
ACC.clinical$admin.disease_code
ACC.clinical$patient.clinical_cqcf.days_to_death
BRCA.clinical$patient.clinical_cqcf.days_to_death
ACC.rnaseq
ACC.RPPA
ACC.mutations
install.packages("RSQLite")
require(RSQLite)
drv = dbDriver("SQLite")
tfile = "brca.db"
con = dbConnect(drv, dbname = "brca.db")
dbWriteTable(con, "brca", as.data.frame(expressionsTCGA(BRCA.mRNA)))
dbWriteTable(con, "brca", as.data.frame(t(expressionsTCGA(BRCA.mRNA))))
library(canvasXpress)
y=read.table("https://www.canvasxpress.org/data/cX-gantt2-dat.txt", header=TRUE, sep="\t", quote="", row.names=1, fill=TRUE, check.names=FALSE, stringsAsFactors=FALSE)
x=read.table("https://www.canvasxpress.org/data/cX-gantt2-smp.txt", header=TRUE, sep="\t", quote="", row.names=1, fill=TRUE, check.names=FALSE, stringsAsFactors=FALSE)
canvasXpress(
data=y,
smpAnnot=x,
blockContrast=TRUE,
colorBy="Indication",
ganttCompletion="Completion",
ganttDependency="Dependencies",
ganttEnd="End",
ganttStart="Start",
graphType="Gantt",
theme="CanvasXpress"
)
library(canvasXpress)
vals = c(20140221,20140521,20140821,20141121,20150221,20150521,20140821,20141121,20150221,20150521,20150821,20151121,
20140520,20140820,20141120,20150220,20150520,20150820,20141120,20150220,20150520,20150820,20151120,20160220)
vars = c("Start",
"End")
smps = c("S01",
"S02",
"S03",
"S04",
"S05",
"S06",
"S07",
"S08",
"S09",
"S10",
"S11",
"S12")
data = as.data.frame(matrix(vals, nrow = 2, ncol = 12, byrow = TRUE, dimnames = list(vars, smps)))
valx = c("CT001",
"CT002",
"CT003",
"CT004",
"CT005",
"CT006",
"CT001",
"CT002",
"CT003",
"CT004",
"CT005",
"CT006",
"Lung",
"Liver",
"Breast",
"Skin",
"Lung",
"Lung",
"Breast",
"Pancreas",
"Stomach",
"Breast",
"Skin",
"Lung",
0.2,
0.6,
1,
0.4,
0.3,
0.4,
0.25,
1,
0.8,
0.9,
0.6,
0.3,
"",
"",
"",
"",
"",
"",
"S01",
"S02",
"S03",
"",
"",
"")
varx = c("Clinical Trial","Indication","Completion","Dependencies")
datx = as.data.frame(matrix(valx, nrow = 4, ncol = 12, byrow = TRUE, dimnames = list(varx, smps)))
canvasXpress(
data = data,
smpAnnot = datx,
blockContrast = TRUE,
colorBy = "Indication",
ganttCompletion = "Completion",
ganttDependency = "Dependencies",
ganttEnd = "End",
ganttStart = "Start",
graphType = "Gantt",
theme = "CanvasXpress",
graphOrientation = "horizontal"
)
library(canvasXpress)
genome = list(
list(
subtype = "DNA",
type = "sequence",
data = list(
list(
id = "Reference Sequence",
fill = "rgb(51,255,255)",
outline = "rgb(0,0,0)",
dir = "right",
offset = 1,
sequence = "TACGTACGTACGTACGTACGTACGTACGT"
),
list(
id = "R1-0000-1234",
fill = "rgb(255,255,51)",
outline = "rgb(0,0,0)",
dir = "right",
offset = 1,
gaps = list(
list(4,2),
list(8,1)
),
sequence = "TACGCGTAGTACGT"
),
list(
id = "R1-0000-2345",
fill = "rgb(255,255,102)",
outline = "rgb(0,0,0)",
dir = "right",
offset = 6,
gaps = list(
list(3,1),
list(10,1)
),
sequence = "ACGACGTACGACG"
),
list(
id = "R1-0000-3456",
fill = "rgb(255,51,255)",
outline = "rgb(0,0,0)",
dir = "left",
offsetLeft = "23",
gaps = list(
list(7,2)
),
sequence = "GTACGTATAC",
offset = 12
),
list(
id = "R1-0000-4567",
fill = "rgb(255,102,255)",
outline = "rgb(0,0,0)",
dir = "right",
offset = 15,
gaps = list(
list(5,1)
),
sequence = "CGTACTACGTA"
),
list(
id = "R1-0000-5678",
fill = "rgb(51,255,255)",
outline = "rgb(0,0,0)",
dir = "right",
offset = 18,
gaps = list(
list(7,1)
),
sequence = "ACGTACGACGT"
)
)
)
)
canvasXpress(
tracks = genome,
background = "rgb(245,245,245)",
graphType = "Genome",
setMax = 30,
setMin = 0,
graphOrientation = "horizontal"
)
Color Themes
EconomistGGPlotExcelPaul TolBlack And WhiteSolarizedStataTableauWall StreetCanvasXpress
Data
Configuration
R Code
{
"tracks" : [{"data" : [{"dir" : "right","fill" : "rgb(51,255,255)","id" : "Reference Sequence","offset" : 1,"outline" : "rgb(0,0,0)","sequence" : "TACGTACGTACGTACGTACGTACGTACGT"},{"dir" : "right","fill" : "rgb(255,255,51)","gaps" : [
[4,2],
[8,1]
],
"id" : "R1-0000-1234",
"offset" : 1,
"outline" : "rgb(0,0,0)",
"sequence" : "TACGCGTAGTACGT"
},
source("~/Downloads/test.r")
source("~/Downloads/test.r")
genome
canvasXpress(
tracks = genome,
background = "rgb(245,245,245)",
graphType = "Genome",
setMax = 30,
setMin = 0,
graphOrientation = "horizontal"
)
library(canvasXpress)
library(jsonlite)
genome <- read_json("https://www.canvasxpress.org/data/cX-genomesimple.json")
canvasXpress(
data=genome,
background="rgb(245,245,245)",
graphType="Genome",
setMax=30,
setMin=0
)
library(canvasXpress)
vals = c(20140221,20140521,20140821,20141121,20150221,20150521,
20140520,20140820,20141120,20150220,20150520,20150820)
vars = c("Start",
"End")
smps = c("S01",
"S02",
"S03",
"S04",
"S05",
"S06")
data = as.data.frame(matrix(vals, nrow = 2, ncol = 6, byrow = TRUE, dimnames = list(vars, smps)))
canvasXpress(
data = data,
blockContrast = TRUE,
ganttEnd = "End",
ganttStart = "Start",
graphType = "Gantt",
theme = "CanvasXpress",
graphOrientation = "horizontal"
)
data
library(canvasXpress)
vals = c(20140221,20140521,20140821,20141121,20150221,20150521,
20140520,20140820,20141120,20150220,20150520,20150820)
vars = c("Start",
"End")
smps = c("S01",
"S02",
"S03",
"S04",
"S05",
"S06")
data = as.data.frame(matrix(vals, nrow = 2, ncol = 6, byrow = TRUE, dimnames = list(vars, smps)))
canvasXpress(
data = data,
blockContrast = TRUE,
ganttEnd = "End",
ganttStart = "Start",
graphType = "Gantt",
theme = "CanvasXpress",
graphOrientation = "horizontal"
)
library(canvasXpress)
vals = c(20140221,20140521,20140821,20141121,20150221,20150521,
20140520,20140820,20141120,20150220,20150520,20150820)
vars = c("Start",
"End")
smps = c("S01",
"S02",
"S03",
"S04",
"S05",
"S06")
data = as.data.frame(matrix(vals, nrow = 2, ncol = 6, byrow = TRUE, dimnames = list(vars, smps)))
canvasXpress(
data = data,
blockContrast = TRUE,
ganttEnd = "End",
ganttStart = "Start",
graphType = "Gantt",
theme = "CanvasXpress",
graphOrientation = "horizontal"
)
library(canvasXpress)
vals = c(20140221,20140521,20140821,20141121,20150221,20150521,
20140520,20140820,20141120,20150220,20150520,20150820)
vars = c("Start",
"End")
smps = c("S01",
"S02",
"S03",
"S04",
"S05",
"S06")
data = as.data.frame(matrix(vals, nrow = 2, ncol = 6, byrow = TRUE, dimnames = list(vars, smps)))
canvasXpress(
data = data,
blockContrast = TRUE,
ganttEnd = "End",
ganttStart = "Start",
graphType = "Gantt",
theme = "CanvasXpress",
graphOrientation = "horizontal"
)
library(ggplot2)
h <- ggplot(economics, aes(date, unemploy))
h + geom_path()
h + geom_ribbon(aes(ymin = unemploy-900, ymax = unemploy+900), fill = "steelblue")
h + geom_ribbon(aes(ymin = unemploy-900, ymax = unemploy+900), fill = "steelblue") + geom_path()
economics
write.table(economics, file="~/Downloads/economics.txt", sep = "\t")
setwd("~/git/cxplot/R")
source('cxplot.r')
library(ggplot2)
library(dplyr)
library(canvasXpress)
ggplot(mpg, aes(class)) + geom_bar()
cxplot(ggplot(mpg, aes(class)) + geom_bar())
View(cx_geom_density_2d_filled)
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(scale = "width")
cxplot(ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(scale = "width"))
ggplot(faithfuld, aes(waiting, eruptions, z = density)) + geom_contour(binwidth = 0.001)
cxplot(ggplot(faithfuld, aes(waiting, eruptions, z = density)) + geom_contour(binwidth = 0.001))
View(cx_geom_density_2d_filled)
